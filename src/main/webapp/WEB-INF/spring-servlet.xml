<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
    xmlns:p="http://www.springframework.org/schema/p"    
    xmlns:mvc="http://www.springframework.org/schema/mvc"    
    xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:util="http://www.springframework.org/schema/util"    
    xmlns:websocket="http://www.springframework.org/schema/websocket"
    xsi:schemaLocation="
    		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd    
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd    
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd    
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
            http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd"> 
     
    <!-- 对web包中的所有类进行扫描，以完成Controller的创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.pujun.webcrawler">
    	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <mvc:annotation-driven />
	<!-- 文件上传配置实例 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
		<property name="maxUploadSize">
			<value>8388608</value><!-- 8mb -->
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>

	<mvc:default-servlet-handler /> 
	
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<property name="validationMessageSource" ref="messageSource"/>
	</bean>
    
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
			   <value>text/html</value>
			   <value>text/json</value>
			   <value>application/json</value>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="byteArrayHttpMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
				<ref bean="byteArrayHttpMessageConverter" /><!-- 二进制转换器 -->
			</list>
		</property>
	</bean>
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".html" />
	</bean>
	<!-- 拦截器 配置实例
	<mvc:interceptors>
	   <mvc:interceptor>
    		<mvc:mapping path="/manage/**"/>
    		<mvc:exclude-mapping path="/manage/user/login"/>
    		<mvc:exclude-mapping path="/manage/user/logout"/>
    		<bean class="sinosoft.dcq.rgisp.bg.interceptor.UserLoginInterceptor"/>
    	</mvc:interceptor>
    </mvc:interceptors> -->
    
	<!-- 异常处理 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- <property name="defaultErrorView">
			<value>/page/common/error/500</value>
		</property> -->
		<property name="defaultStatusCode">
			<value>500</value>
		</property>
		<!-- 
			此处是配置异常日志的输出，如果不为空，spring就会使用org.apache.commons.logging.Log日志工具，记录这个异常，级别是warn。
			同时在log4j的配置文件中还要加入log4j.logger.[warnLogCategory的配置值]=WARN，本例中就是log4j.logger.exception.resolver=WARN
		
		<property name="warnLogCategory">
			<value>exception.resolver</value>
		</property> -->
	</bean>

	<mvc:default-servlet-handler/>
    
</beans>
